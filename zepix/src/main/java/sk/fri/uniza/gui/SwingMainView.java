package sk.fri.uniza.gui;

import sk.fri.uniza.*;
import sk.fri.uniza.Signer.DigestAlgorithm;
import sk.fri.uniza.Signer.SignatureLevel;
import sk.fri.uniza.Signer.SignatureStructure;
import sk.fri.uniza.SendRequest;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.io.File;
import java.lang.reflect.InvocationTargetException;
import java.util.*;


import javax.swing.*;

public class SwingMainView extends javax.swing.JFrame implements MainView {

    private final String CHOOSE_FILE_TEXT = "vybrať";
    private final String WARNING_TITLE_TEXT = "Varovanie";
    private final String SIGNED_POSTING_SHEET_MSG = "epH úspešne podísané";

    private JTabbedPane mainTabbedPanel;

    //Congiguration Panel
    private JPanel configurationPanel;

    private JLabel xsdFilePathLabel;
    private JTextField xsdFilePathTextField;
    private JButton chooseXSDFileButton;
    private JFileChooser xsdFileChooser;

    private JSeparator jSeparator2;

    private JLabel policyComboBoxLabel;
    private JComboBox<SignaturePolicy> policyComboBox;
    private JLabel structureLabel;
    private JComboBox<SignatureStructure> structureComboBox;
    private JLabel digestAlgLabel;
    private JComboBox<DigestAlgorithm> digestAlgComboBox;
    private JLabel levelLabel;
    private JComboBox<SignatureLevel> levelComboBox;
    private ItemListener signParameterChangedItemListener = new ItemListener() {
        @Override
        public void itemStateChanged(ItemEvent e) {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                setUnsignedState();
            }
        }
    };

    private JLabel secureTokenLabel;
    private JTextField tokenFilePathTextField;
    private JButton chooseP12FileButton;
    private JFileChooser p12FileChooser;
    private JLabel tokenPasswordLabel;
    private JPasswordField tokenPasswordField;

    private JSeparator jSeparator1;

    private JLabel subjectLabel;
    private JTextField subjectTextField;
    private JLabel usernameLabel;
    private JLabel passwordLabel;
    private JPasswordField userPasswordField;
    private JTextField usernameTextField;
    private JLabel filingRoomURLlabel;
    private JTextField filingRoomURLtextField;

    //Signing Panel
    private JPanel signingPanel;

    private JLabel postingSheetLabel;
    private JTextField postingSheetPathTextField;
    private JButton choosePostingSheetButton;
    private JFileChooser postingSheetFilerChooser;
    private JButton signButton;
    private JButton sendButton;
    private JButton saveButton;
    private JLabel signedStatus;

    public SwingMainView() {
        initComponents();
        initMyComponents();
    }

    private void initMyComponents() {
        xsdFileChooser = new JFileChooser();
        xsdFileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        p12FileChooser = new JFileChooser();
        p12FileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

        postingSheetFilerChooser = new JFileChooser();

        structureComboBox.addItemListener(signParameterChangedItemListener);
        digestAlgComboBox.addItemListener(signParameterChangedItemListener);
        levelComboBox.addItemListener(signParameterChangedItemListener);

        filingRoomURLtextField.setText("http://ekpt.posta.sk");
        subjectTextField.setText("unizaFRI");
        usernameTextField.setText("postarJanko");
        userPasswordField.setText("**********");
    }

    /**
     * Code generated from NetBeans GUI Builder
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        mainTabbedPanel = new javax.swing.JTabbedPane();
        configurationPanel = new javax.swing.JPanel();
        xsdFilePathTextField = new javax.swing.JTextField();
        xsdFilePathLabel = new javax.swing.JLabel();
        chooseXSDFileButton = new javax.swing.JButton();
        policyComboBoxLabel = new javax.swing.JLabel();
        policyComboBox = new javax.swing.JComboBox<SignaturePolicy>();
        structureLabel = new javax.swing.JLabel();
        structureComboBox = new javax.swing.JComboBox<SignatureStructure>();
        digestAlgLabel = new javax.swing.JLabel();
        digestAlgComboBox = new javax.swing.JComboBox<DigestAlgorithm>();
        levelLabel = new javax.swing.JLabel();
        levelComboBox = new javax.swing.JComboBox<SignatureLevel>();
        secureTokenLabel = new javax.swing.JLabel();
        tokenFilePathTextField = new javax.swing.JTextField();
        chooseP12FileButton = new javax.swing.JButton();
        tokenPasswordLabel = new javax.swing.JLabel();
        tokenPasswordField = new javax.swing.JPasswordField();
        subjectLabel = new javax.swing.JLabel();
        subjectTextField = new javax.swing.JTextField();
        usernameLabel = new javax.swing.JLabel();
        passwordLabel = new javax.swing.JLabel();
        userPasswordField = new javax.swing.JPasswordField();
        usernameTextField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        filingRoomURLlabel = new javax.swing.JLabel();
        filingRoomURLtextField = new javax.swing.JTextField();
        signingPanel = new javax.swing.JPanel();
        postingSheetLabel = new javax.swing.JLabel();
        postingSheetPathTextField = new javax.swing.JTextField();
        signButton = new javax.swing.JButton();
        signedStatus = new javax.swing.JLabel();
        choosePostingSheetButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        sendButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        xsdFilePathTextField.setEditable(false);

        xsdFilePathLabel.setText("Validačná schéma ePH:");

        chooseXSDFileButton.setText("vyber schému");
        chooseXSDFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseXSDFileButtonActionPerformed(evt);
            }
        });

        policyComboBoxLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        policyComboBoxLabel.setText("Podpisová politika:");

        structureLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        structureLabel.setText("Štruktúra podpispu:");

        digestAlgLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        digestAlgLabel.setText("Hešovací algoritmus:");

        levelLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        levelLabel.setText("XAdES-baseline úroveň:");

        secureTokenLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        secureTokenLabel.setText("Bezpečné úložisko:");

        tokenFilePathTextField.setEditable(false);

        chooseP12FileButton.setText("vyber úložisko");
        chooseP12FileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chooseP12FileButtonActionPerformed(evt);
            }
        });

        tokenPasswordLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        tokenPasswordLabel.setText("Heslo:");

        subjectLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        subjectLabel.setText("Subjekt:");

        usernameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        usernameLabel.setText("Heslo:");

        passwordLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        passwordLabel.setText("Osoba:");

        filingRoomURLlabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        filingRoomURLlabel.setText("URL podateľne:");

        javax.swing.GroupLayout configurationPanelLayout = new javax.swing.GroupLayout(configurationPanel);
        configurationPanel.setLayout(configurationPanelLayout);
        configurationPanelLayout.setHorizontalGroup(
                configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(configurationPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jSeparator1)
                                        .addGroup(configurationPanelLayout.createSequentialGroup()
                                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(configurationPanelLayout.createSequentialGroup()
                                                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(levelLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(digestAlgLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(xsdFilePathLabel)
                                                                        .addComponent(policyComboBoxLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(structureLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(xsdFilePathTextField)
                                                                        .addComponent(policyComboBox, 0, 291, Short.MAX_VALUE)
                                                                        .addComponent(digestAlgComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(levelComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(structureComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                                        .addGroup(configurationPanelLayout.createSequentialGroup()
                                                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                                        .addComponent(secureTokenLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                                                                        .addComponent(subjectLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(passwordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(usernameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(filingRoomURLlabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                        .addComponent(tokenPasswordLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(tokenFilePathTextField)
                                                                        .addComponent(tokenPasswordField)
                                                                        .addComponent(subjectTextField)
                                                                        .addComponent(userPasswordField)
                                                                        .addComponent(usernameTextField)
                                                                        .addComponent(filingRoomURLtextField))))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                        .addComponent(chooseXSDFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                        .addComponent(chooseP12FileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addContainerGap())
        );
        configurationPanelLayout.setVerticalGroup(
                configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(configurationPanelLayout.createSequentialGroup()
                                .addGap(22, 22, 22)
                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(xsdFilePathLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(xsdFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(chooseXSDFileButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(11, 11, 11)
                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(policyComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(policyComboBoxLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(structureLabel)
                                        .addComponent(structureComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(digestAlgLabel)
                                        .addComponent(digestAlgComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(levelLabel)
                                        .addComponent(levelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(22, 22, 22)
                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(secureTokenLabel)
                                        .addComponent(tokenFilePathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(chooseP12FileButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tokenPasswordLabel)
                                        .addComponent(tokenPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(4, 4, 4)
                                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(4, 4, 4)
                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(subjectTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(subjectLabel))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(usernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(passwordLabel))
                                .addGap(6, 6, 6)
                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(userPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(configurationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(filingRoomURLtextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(filingRoomURLlabel))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        xsdFilePathLabel.getAccessibleContext().setAccessibleName("");
        chooseXSDFileButton.getAccessibleContext().setAccessibleName("");

        mainTabbedPanel.addTab("kofigurácia", configurationPanel);

        postingSheetLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        postingSheetLabel.setText("Súbor EPH:");

        postingSheetPathTextField.setEditable(false);

        signButton.setText("podpíš");

        signedStatus.setFont(new java.awt.Font("Ubuntu", 1, 15)); // NOI18N
        signedStatus.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        signedStatus.setText("ePH úspešne podpísané");
        signedStatus.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        choosePostingSheetButton.setText("vyber hárok");
        choosePostingSheetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                choosePostingSheetButtonActionPerformed(evt);
            }
        });

        saveButton.setText("ulož");
        saveButton.setEnabled(false);

        sendButton.setText("podaj");
        sendButton.setEnabled(false);

        javax.swing.GroupLayout signingPanelLayout = new javax.swing.GroupLayout(signingPanel);
        signingPanel.setLayout(signingPanelLayout);
        signingPanelLayout.setHorizontalGroup(
                signingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, signingPanelLayout.createSequentialGroup()
                                .addGap(23, 23, 23)
                                .addComponent(postingSheetLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(signingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(signedStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(postingSheetPathTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 356, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(signingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(choosePostingSheetButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(signButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(19, 19, 19))
        );
        signingPanelLayout.setVerticalGroup(
                signingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(signingPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(signingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(postingSheetLabel)
                                        .addComponent(postingSheetPathTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(choosePostingSheetButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(signingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(signedStatus, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(signButton))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(sendButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveButton)
                                .addContainerGap(304, Short.MAX_VALUE))
        );

        mainTabbedPanel.addTab("podpisovanie ePH", signingPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(mainTabbedPanel)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(mainTabbedPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }

    private void chooseXSDFileButtonActionPerformed(ActionEvent evt) {
        chooseFilePathAndSetItToTextField(xsdFileChooser, xsdFilePathTextField);
    }

    private void chooseP12FileButtonActionPerformed(ActionEvent evt) {
        chooseFilePathAndSetItToTextField(p12FileChooser, tokenFilePathTextField);
    }

    private void chooseFilePathAndSetItToTextField(JFileChooser chooser, JTextField textField) {
        int result = chooser.showDialog(this, CHOOSE_FILE_TEXT);
        if (result == JFileChooser.APPROVE_OPTION) {
            File selectedFile = chooser.getSelectedFile();
            textField.setText(selectedFile.getAbsolutePath());
            setUnsignedState();
        }
    }

    private void choosePostingSheetButtonActionPerformed(ActionEvent evt) {
        postingSheetFilerChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        chooseFilePathAndSetItToTextField(postingSheetFilerChooser, postingSheetPathTextField);
    }

    @Override
    public File getFilePathToSavePostingSheet() {
        postingSheetFilerChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = postingSheetFilerChooser.showDialog(this, CHOOSE_FILE_TEXT);
        if (result == JFileChooser.APPROVE_OPTION) {
            return postingSheetFilerChooser.getSelectedFile();
        }
        throw new CanceledFileChooserException();
    }

    @Override
    public void addPolicyListener(ItemListener itemListener) {
        policyComboBox.addItemListener(itemListener);
    }

    @Override
    public void addSignListener(ActionListener actionListener) {
        signButton.addActionListener(actionListener);
    }

    @Override
    public void addSaveListener(ActionListener actionListener) {
        saveButton.addActionListener(actionListener);
    }

    @Override
    public void addSendListener(ActionListener actionListener) {
        sendButton.addActionListener(actionListener);
    }

    /* first element must go first in compliance with interface contract */
    @Override
    public void showPolicies(Collection<SignaturePolicy> signaturePolicies) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                addCollectionItemsIntoComboBoxAndSetRenderer(policyComboBox, signaturePolicies);
            }
        });
    }

    private <I extends Identifiable> void addCollectionItemsIntoComboBoxAndSetRenderer(JComboBox<I> comboBox, Collection<I> collection) {
        for (I item : collection) {
            comboBox.addItem(item);
        }
        comboBox.setRenderer(new IdentifiableRenderer());
    }

    @Override
    public void showDigestAlgorithms(Collection<DigestAlgorithm> digestAlgorithms) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                comboItemsReplaceByCollectionsItemsAndSetRenderer(digestAlgComboBox, digestAlgorithms);
            }
        });
    }

    private <I extends Identifiable> void comboItemsReplaceByCollectionsItemsAndSetRenderer(JComboBox<I> combobox, Collection<I> collection) {
        combobox.removeAllItems();
        addCollectionItemsIntoComboBoxAndSetRenderer(combobox, collection);
    }

    @Override
    public void showStructures(Collection<SignatureStructure> signatureStructures) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                comboItemsReplaceByCollectionsItemsAndSetRenderer(structureComboBox, signatureStructures);
            }
        });
    }

    @Override
    public void showLevels(Collection<SignatureLevel> signatureLevels) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                comboItemsReplaceByCollectionsItemsAndSetRenderer(levelComboBox, signatureLevels);
            }
        });
    }

    @Override
    public void showError(String message) {
        setUnsignedState();

        final Component component = this;
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                JOptionPane.showMessageDialog(component,
                        message,
                        WARNING_TITLE_TEXT,
                        JOptionPane.WARNING_MESSAGE);
            }
        });
    }

    @Override
    public void setUnsignedState() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                signedStatus.setText("");
                saveButton.setEnabled(false);
                sendButton.setEnabled(false);
            }
        });
    }

    @Override
    public void setSignedState() {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                signedStatus.setText(SIGNED_POSTING_SHEET_MSG);
                saveButton.setEnabled(true);
                sendButton.setEnabled(true);
            }
        });
    }

    @Override
    public String getPostingSheetFilePath() {
        return postingSheetPathTextField.getText();
    }

    @Override
    public String getValidationInfoFilePath() {
        return xsdFilePathTextField.getText();
    }

    @Override
    public SignaturePolicy getSelectedPolicy() {
        return policyComboBox.getItemAt(policyComboBox.getSelectedIndex());
    }

    @Override
    public SignatureStructure getSelectedStructure() {
        return structureComboBox.getItemAt(structureComboBox.getSelectedIndex());
    }

    @Override
    public SignatureLevel getSelectedLevel() {
        return levelComboBox.getItemAt(levelComboBox.getSelectedIndex());
    }

    @Override
    public DigestAlgorithm getSelectedDigestAlgorithm() {
        return digestAlgComboBox.getItemAt(digestAlgComboBox.getSelectedIndex());
    }

    @Override
    public String getFilePathToKeyStore() {
        return tokenFilePathTextField.getText();
    }

    @Override
    public char[] getPasswordToKeyStore() {
        return tokenPasswordField.getPassword();
    }


    @Override
    public SendRequest createSendRequest() {
        SendRequest sendRequest = new SendRequest();
        try {
            trySendSendRequestOnEventDispatchThread(sendRequest);
        } catch (InterruptedException | InvocationTargetException e) {
            e.printStackTrace();
        }
        return sendRequest;
    }

    private void trySendSendRequestOnEventDispatchThread(final SendRequest sendRequest) throws InterruptedException, InvocationTargetException {
        SwingUtilities.invokeAndWait(new Runnable() {
            @Override
            public void run() {
                sendRequest.setFilingRoomURL(filingRoomURLtextField.getText());
                sendRequest.setSubject(subjectTextField.getText());
                sendRequest.setUserName(usernameTextField.getText());
                sendRequest.setPassword(userPasswordField.getPassword());
            }
        });
    }

    private static class IdentifiableRenderer extends JLabel implements ListCellRenderer<Identifiable> {

        public IdentifiableRenderer() {
        }

        @Override
        public Component getListCellRendererComponent(
                JList<? extends Identifiable> list,
                Identifiable value,
                int index,
                boolean isSelected,
                boolean cellHasFocus) {

            setText(value.getName());
            setBackgroundAndForegroundColor(list, index, isSelected);

            return this;
        }

        /*
         https://docs.oracle.com/javase/7/docs/api/javax/swing/ListCellRenderer.html
         */
        private void setBackgroundAndForegroundColor(
                JList<? extends Identifiable> list,
                int index,
                boolean isSelected) {

            JList.DropLocation dropLocation = list.getDropLocation();
            if (isCellRepresentsCurrentDnDDropLocation(dropLocation, index)) {
                setBackground(Color.BLUE);
                setForeground(Color.WHITE);
            } else if (isSelected) {
                setBackground(Color.WHITE);
                setForeground(Color.ORANGE);
            } else {
                setBackground(Color.WHITE);
                setForeground(Color.BLACK);
            }
        }

        private static boolean isCellRepresentsCurrentDnDDropLocation(
                JList.DropLocation dropLocation,
                int index) {
            return dropLocation != null && !dropLocation.isInsert()
                    && dropLocation.getIndex() == index;
        }

    }

}
